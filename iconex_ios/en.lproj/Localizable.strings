/*
  Localizable.strings
  ios-iCONex

  Copyright © 2018 ICON Foundation. All rights reserved.
*/
"Common.Yes" = "Yes";
"Common.No" = "No";
"Common.Confirm" = "Confirm";
"Common.Cancel" = "Cancel";
"Common.Back" = "Back";
"Common.Next" = "Next";
"Common.Complete" = "Complete";
"Common.Edit" = "Edit";
"Common.Add" = "Add";
"Common.Change" = "Change";
"Common.Close" = "Close";
"Common.Copied" = "Copied";
"Common.Done" = "Complete";
"Common.Remove" = "Delete";
"Common.Modify" = "Edit";
"Common.Downloading" = "Downloading...";

"Wallet.Keystore" = "Keystore File";
"Wallet.Address" = "Wallet Address";
"Wallet.Address.Copy" = "Copy Address";
"Wallet.PrivateKey" = "Private Key";
"Wallet.PrivateKey.Copy" = "Copy Private Key";
"Wallet.PrivateKey.Copy.Message" = "Private key is copied.";
"Wallet.ViewInfo" = "View Wallet Info";
"Wallet.Create" = "Create a Wallet";
"Wallet.Load" = "Load Wallet";
"Wallet.Backup" = "Backup Wallet";
"Wallet.Address.CopyComplete" = "Address is copied.";

"Placeholder.InputPassword" = "Enter the password";
"Placeholder.ConfirmPassword" = "Re-enter the password";
"Placeholder.PrivateKey" = "Enter the private key";
"Placeholder.WalletName" = "Enter the wallet name";

///////////////////////////

// MARK: PermissionViewController
"Permission.Title" = "App Permissions";
"Permission.Required.Title" = "Required";
"Permission.None" = "None";
"Permission.Optional.Title" = "Optional";
"Permission.Camera.Title" = "Camera";
"Permission.Camera.Desc" = "・ Read QR codes of wallet addresses or private keys.";
"Permission.footer.desc1" = "・ If you deny this permission, you may no longer use some features of your device.";
"Permission.footer.desc2" = "・ You can change this access permission in \"Setting\" > \"ICONex\"";

// MARK: StartViewController
"Start.Instruction.1" = "ICONex enables users to create and manage wallets for various cryptocurrencies that are connected to ICON Network including ICX and ETH.";
"Start.Instruction.2" = "Convenient storage and transfer of ICX and other various cryptocurrencies connected with ICON are possible based on the Reserved Balance.";
"Start.CreateWallet" = "Create Wallet";
"Start.LoadWallet" = "Load Wallet";

// MARK: CreateWalletViewController
"CreateWallet.Create" = "Create a Wallet";
"Create.Wallet.Cancel" = "Are you sure you want to cancel this process?";

// MARK: CreateSelectViewController
"Create.Wallet.Step1.StepTitle" = "Select the coin";
"CreateSelect.Main" = "Which coin would you like to add?";
"CreateSelect.Instruction1" = "・ Selected coin wallet will created after the completion of creating wallet.";
"CreateSelect.Instruction2" = "・ After creating wallet, token that is based on according coin can be added.";

// MARK: CreateKeystoreViewController
"Create.Wallet.Step2.StepTitle" = "Input information";
"Create.Wallet.Step2.Header" = "Please insert wallet name and password.";
"Create.Wallet.Step2.WalletName.Placeholder" = "Wallet name (8 letters)";
"Create.Wallet.Step2.Password.Placeholder" = "password";
"Create.Wallet.Step2.Confirm.Placeholder" = "Confirm password";
"Create.Wallet.Step2.Footer" = "It is users responsible to manage password; There is no way to find it.";
"Create.Wallet.Step2.Desc" = "・ In order to restore wallet by Keystore file, it requires password to send transaction.";

// MARK: BackupViewController
"Create.Wallet.Step3.StepTitle" = "Download Keystore files";
"Create.Wallet.Step3.Header" = "Please download wallet Keystore files.";
"Create.Wallet.Step3.Download" = "Download wallet Keystore files";
"Create.Wallet.Step3.Footer" = "Wallet Keystore file contains its own private key and password is required.";
"Create.Wallet.Step3.Desc.1_1" = "・ With wallet Keystore file and password, wallet can be install in different device and restore deleted wallet.";
"Create.Wallet.Step3.Desc.1_2" = "・ Keystore files can be dowload after creating wallet at 'wallet Keystore'.";
"Create.Wallet.Step3.Alert.Info1" = "Wallet Keystore files should not be shared";
"Create.Wallet.Step3.Alert.Info2" = "Keystore file that saved in \"my iPhone\" could deleted when application is deleted. Please save at safe place.";
"Create.Wallet.Step3.Alert.Save" = "File saved.";
"Create.Wallet.Step3.Alert.NotSaved" = "Would you like to proceed without saving Keystore file?";

// MARK: CompleteViewController
"Create.Wallet.Step4.StepTitle" = "Save private key";
"Create.Wallet.Step4.Header" = "Please save private key.";
"Create.Wallet.Step4.Copy" = "Copy private key";
"Create.Wallet.Step4.WalletInfo" = "Private key information";
"Create.Wallet.Step4.Footer" = "Wallet has its own private key and there is no password to set up.";
"Create.Wallet.Step4.Desc.1" = "・ Private Key should kept as secure place since it can access and restore wallet.";
"Create.Wallet.Step4.Desc.2" = "・ After creating wallet, you can check at 'Wallet Keystore'.";

// MARK: AlertCustomView
"Alert.Common.StepLimit" = "Step limit / Price (ICX)";
"Alert.Common.EstimatedFee" = "Maxium estimated transaction fee (ICX)";

"Alert.Iscore.Header" = "I-Score Claim";
"Alert.Iscore.Current" = "Current I-Score (ISC)";
"Alert.Iscore.Value" = "Available amount (ICX)";

"Alert.Address.Header" = "Add address";
"Alert.Address.Placeholder.Name" = "Name of Addressbook (8 letter)";
"Alert.Address.Placeholder.ETH" = "Enter ETH address";
"Alert.Address.Placeholder.ICX" = "Enter ICX address";

"Alert.TxHash.Header" = "Tx Hash";
"Alert.TxHash.Tracker" = "Check in ICON Tracker";
"Alert.Transaction.Copy" = "Copy";
"Alert.Transaction.Copy.Complete" = "Transaction ID has copied.";

"Alert.Stake.Header" = "Stake";
"Alert.Stake.Time" = "Duration time";

"Alert.UnStake.Header" = "UnStake";

"Alert.UnStakeCancel.Header" = "Cancle UnStake";
"Alert.UnStakeCancel.Immediate" = "Cancle Immediate";
"Alert.UnStakeCancel.Infomation" = "There is transaction fee for canceling Unstake.\nAre you canceling?";
"Alert.UnStakeCancel.Done" = "Cancling Unstake is completed.";

"Alert.Send.Header" = "Tranfer";
"Alert.Send.Value.ICX" = "Tranfer Amount (ICX)";
"Alert.Send.Value.ETH" = "Tranfer Amount (ETH)";
"Alert.Send.Value.Token" = "Tranfer Amount (%@)";
"Alert.Send.Address" = "Receiving Address";
"Alert.Send.ETH.Fee" = "Maxium expected transaction fee (ETH)";

"Alert.Password.Header" = "Enter wallet password";
"Alert.Password.Placeholder" = "Enter Password";

"Alert.WalletName.Header" = "Edit Wallet Name";
"Alert.WalletName.Placeholder" = "Wallet Name";

"Alert.QRCode.PrivateKey" = "Private Key should not be shared since it can operate by itself.";

"Alert.ForgotPasscode.Title" = "Forget Password?";
"Alert.ForgotPasscode.SubTitle" = "You can reset password using private key. Please follow directions.\nSelect the \"Load your wallet\"> Select the \"Private Key\" > Input the Private Key and load your wallet > Input the new password";

"Alert.Vote.Header" = "Vote";
"Alert.Vote.Prep" = "Voted P-Rep";

"Alert.PrepDetail.Header" = "Details";

// MARK: Floater
"Floater.Vote.PReps" = "P-Reps";
"Floater.Vote.Stake" = "Stake";
"Floater.Vote.Vote" = "Vote";
"Floater.Vote.IScore" = "I-Score";
"Floater.Wallet.Deposit" = "Deposit";
"Floater.Wallet.Send" = "Transfer";
"Floater.Alert.Stake" = "In order to stake or unstake account should have more than 1 ICX.";
"Floater.Alert.Vote" = "There is no Voting Power. Staking ICX will create Voting Power on 1 to 1 ratio.";

// MARK: QRReaderViewController
"QRReader.Desc" = "Address or private key can be import by QRcode.";
"QRReader.Error.PrivateKey" = "Private key format is incorrect.";
"QRReader.Error.ICX" = "Incorrect ICX address.";
"QRReader.Error.ETH" = "Incorrect ETH address.";

// MARK: LoadWalletViewController
"LoadWallet.Title" = "Wallet Import";
"LoadWallet.Display.Step1.Title" = "Select Method";
"LoadWallet.Display.Step2.Title" = "Select file or enter private key";
"LoadWallet.Display.Step3.Title" = "Wallet information";
"LoadWallet.Alert.Cancel" = "Cancel the import wallet?";


// MARK: LoadSelectViewController
"LoadSelect.Header" = "Select the method to import wallet.";
"LoadSelect.Keystore" = "backup file";
"LoadSelect.PrivateKey" = "Private Key";
"LoadSelect.Desc1" = "・ Keystore file contains wallet's own information and private key. There is password for Keystore file.";
"LoadSelect.Desc2" = "・ Private Key is set by wallet and does not have password.";

// MARK: LoadFileViewController
"LoadFile.File.Header" = "Please select keystore file to enter password.";
"LoadFile.File.SelectFile" = "select keystore file";
"LoadFile.File.Desc" = "・ If Keystore file is saved in different device, please save in this device or this cloud server then select Keystore file.";
"LoadFile.PrivateKey.Header" = "Enter Private Key.";
"LoadFile.SelectCoin" = "Select Coin";
"LoadFile.PrivateKey.Desc" = "・ You should choose right private key for coin in order to dispaly correctly.";

// MARK: LoadNameViewController
"LoadName.Wallet.Header" = "Enter new wallet name.";
"LoadName.PK.Header" = "Enter new wallet name and password.";
"LoadName.PK.Desc1" = "It is your responsible for managing password and there is no way to find when you lose it.";
"LoadName.PK.Desc2" = "In order to restoing by keystore file, it requires entering password.";
"LoadName.Bundle.DuplicatedAddress" = "Registered Wallet";
"LoadName.Bundle.HeaderView.Header" = "Would you like to import wallet bundle?";
"LoadName.Bundle.Desc1" = "・ If you import wallet bundle, only unregistered wallet will be added.";
"LoadName.Bundle.Desc2" = "・ Password for added wallet is same as wallet bundle.";
"LoadName.Bundle.TotalWallets" = "In total of %@ wallet";
"LoadName.Bundle.AlreadyLoaded" = "There are %@ already registered wallet";

// MARK: ExportMainViewController
"ExportMain.Title" = "Export wallet in bundle";
"ExportMain.Display.Step1.Title" = "Select wallet";
"ExportMain.Display.Step2.Title" = "Keystore File\nDownload";
"ExportMain.Button.BackupDownload" = "Keystore File Download";
"ExportMain.Alert.WarnPassword" = "Creating new password is required to export in bundle.\nExisting wallet password will change with new bundle wallet password.\nWould you like to continue?";
"ExportMain.Alert.BackedUp" = "File saved.";
"ExportMain.Alert.DownloadKeystore" = "Keystore file should not be shared in public.\nWould you like to download?";

// MARK: ExportListViewController
"ExportList.TableHeader.Header" = "Select wallets that export in bundle.\nEach selected wallet requires password confirmation.";
"ExportList.TableHeader.Desc1" = "・ Export in bundle wallet function is to create one keystore file for seleted wallets.";
"ExportList.TableHeader.Desc2" = "・ Operate in different device or restoring deleted wallet requires Keystore file.";
"ExportList.SectionHeader.SelectedWallet" = "%d wallets are selected";
"BundleExport.Step1.Selected" = " wallets are selected";

// MARK: ExportPasswordViewController
"ExportPassword.Header" = " Please create the password for the wallet bundle and download the backup file.";
"ExportPassword.Desc" = "You are responsible for keeping your password safe. DO NOT FORGET TO SAVE THIS. If you lose your password, you cannot restore it.";
"ExportPassword.PostScript" = "・ The Keystore file contains the encrypted private key and requires the wallet password to access it.";









// MARK: IScoreDetailViewController
"IScoreDetail.Header1" = "Current I-Score (ISC)";
"IScoreDetail.Header2" = "Receivable amount (ICX)";
"IScoreDetail.DescHeader1" = "Step Limit / Price (ICX)";
"IScoreDetail.DescHeader2" = "Expected Maximum transaction fee (ICX)";
"IScoreDetail.Claim" = "Claim";
"ISCoreDetail.ClaimSuccess" = "Claim operation completed.";

// MARK: StakeViewController
"Stake.Desc1.Stake" = "・ You cannot unstake the amount that is already delegated.";
"Stake.Desc2.Stake" = "・ Minimum Unstaked amount is 1 ICX. It is required to pay transaction fee occured by delegation.";
"Stake.Desc1.Unavailable" = "・ There is not enough amount.\nDeposit ICX or reduce the delegation abmount in Vote page.";
"Stake.Header.TimeRequired" = "Estimated to complete";
"Stake.Value.TimeRequired.Stake" = "Immediately";
"Stake.Value.TimeRequired.Unstake" = "Unstake in 72 hours";
"Stake.Header.StepLimit" = "Step Limit / Price (ICX)";
"Stake.Header.EstimatedFee" = "Expected Maximum transaction fee (ICX)";
"Stake.Button.Submit" = "Submit";
"Stake.Alert.Title.Stake" = "Stake";
"Stake.Alert.Title.Unstake" = "Unstake";
"Stake.Alert.Discard.Title" = "Do you want to leave without changing anything?";
"Stake.Alert.Discard.Message" = "By prssing Submit button you can change the %@ requested amount.";
"Stake.Alert.Complete.Message" = "%@ Operation completed.";

// MARK: UnStakeViewController
"Unstake.Request.Percent" = "Request Unstake";
"Unstake.Request.ICX" = "Request Unstake (ICX)";
"Unstake.Block" = "Completed BLOCK";
"Unstake.EstimateLockPeriod" = "Estimated completion time";
"Unstake.Edit" = "Change request amount";
"Unstake.Desc" = "・ Changing in request amount will reset the completion time and transaction fee should be paid again.";

// MARK: MyVoteViewController
"MyVoteView.VoteReset" = "Reset delegation amount";
"MyVoteView.Toast" = "Voting is Completed.";
"MyVoteView.Alert.Reset" = "Do you like to set 0 for all voting power that have delegated?";
"MyVoteView.Alert.Back" = "By pressing Vote button will apply the change you made. \nVote Would you like to leave without making change?";
"MyVoteView.Alert.InsufficientFee" = "Not enough ICX to pay transaction fee.";
"MyVoteView.ToolTip.Delete" = "Delegated P-Rep is not able to delete in the list.\nSet Voting Power to 0 and press Vote button.";
"MyVoteView.Empty.Title" = "In the P-Reps tab, add candidates to vote in the voting list first, then adjust Voting Power.";
"MyVoteView.Empty.Desc" = "ICX used for Voting Power can be returned when you unstake your Staked ICX and I-Score will be paid to you as a reward for ecosystem contribution.";

// MARK: PRepsViewController
"PRepView.Toast.MyVotes" = "Add to My Votes";
"PRepView.ToolTip.Exist" = "Already in the list.";
"PRepView.ToolTip.Maximum" = "Maximum number of P-Reps to Vote is 10.";

"PRepView.Alert.Detail" = "Detail information";


// MARK: PRepSearchViewController
"PRepSearch.Placeholder" = "Searching P-Rep Name";


// MARK: MainViewController
"Main.Nav.Title.1" = "Wallet";
"Main.Nav.Title.2" = "Coin&Token";
"Main.Balance.Title" = "Total Asset Value";
"Main.Power.Title" = "Total Voted Power";

// MARK: MainInfoViewController
"Main.Info.About.AllAssets.Title" = "Total Asset Value";
"Main.Info.About.AllAssets.Desc" = "Token that does not display USD value will excluded from calculating total asset value. Please use evaluation amount for your information.";
"Main.Info.About.Prep.Title" = "P-Rep";
"Main.Info.About.Prep.Desc" = "ICON Network is a blockchain network operated by Public Representative (P-Rep). Therefore, Users (ICONist) must vote for high qualified P-Reps so that ICON Network to be more stable. Each P-Reps can submit the Monthly Reward Variable for Representative  (i_rep) that affects the total reward amount for the ICON Network. Therefore, users should compare each i_reps submitted by each P-Reps and make right decision. In addition, users who have participated in the vote will receive reward with Annual Delegation Reward Rate for Representative (r_rep).";
"Main.Info.About.Stake.Title" = "Stake";
"Main.Info.About.Stake.Desc" = "This function is to set ICX to staked ICX. By operating Stake, ICX will changed to locked state, and it will take days to unlock it. Voting power will created with 1 to 1 ratio with Staked ICX amount.";
"Main.Info.About.Vote.Title" = "Vote";
"Main.Info.About.Vote.Desc" = "Usiung Voting Power you can delegate to P-Rep candidates.";
"Main.Info.About.IScore.Title" = "I-Score";
"Main.Info.About.IScore.Desc" = "This Score is contribution score for delegating P-Rep, 1,000 I-Score can be claim to 1 ICX.";


// MARK: SideMenuViewController
"Side.Create" = "Create Wallet";
"Side.Load" = "Import Wallet";
"Side.Export" = "Export Wallet Bundle";
"Side.Lock" = "Lock up setting";
"Side.Version" = "Application version %@";
"Side.Disclaimer" = "ICONex Disclaimer";

// MARK: DisclaimerViewController
"Disclaimer.Title" = "At the time of downloading and using the official ICX wallet, “ICONex”, the below disclaimer will be applied to the users.\n\n";
"Disclaimer.Content" = "1. The private key ICONex user creates in the process of using the ICONex service is stored in your mobile device, ICON Foundation does not store or/and manage the user's private key. The ICONex user is solely responsible for safekeeping and managing the private key created. In the case of the ICONex user not being able to use the private key due to computer virus, hacking activities, theft/loss, etc., ICON Foundation is not responsible for any loss.\n\n2. ICON Foundation does not guarantee the integrity, stability, accuracy and security of ICONex, but only provides the current version of ICONex “AS IS”. ICON Foundation is continuously running tests and making updates to provide a more stable and convenient service, however despite these efforts there is always the possibility of unexpected problems. ICON Foundation is not responsible for any unexpected problems, such as malfunction, hacking, loss and computer virus.\n\n3. ICON Foundation is not responsible for not being able to provide services due to natural disasters or any other force majeure.\n\n4. ICON Foundation is not responsible for any third-party transactions the ICONex user makes using ICONex as an intermediary.\n\n5. ICON Foundation is not responsible for any indirect, consequential, specific, punitive or any similar damages even though if ICONex is related with any torts, contract, guarantee, liability without fault and carelessness.\n\n6. ICONex supports Korean and English as the official languages. ICON Foundation is not responsible for any loss that comes from mis-translation into other languages than the official languages.\n\n※ All copyrights regarding ICONex is held by ICON Foundation.";

// AppInfoViewController
"AppInfo.Title" = "App Info";
"AppInfo.Version" = "Version";
"AppInfo.Current" = "Current version";
"AppInfo.Latest" = "Latest version";
"AppInfo.Update" = "Update";
"AppInfo.License" = "OpenSource License";
"AppInfo.DeveloperMode" = "Developer Mode";
"AppInfo.SelectNetwork" = "Select Network Provider";
"Version.Update" = "Update";
"Version.Message" = "Please update to the latest version of ICONex.";


// MARK: MainQRCodeViewController
"Main.QRCode.InputBox.Placeholder" = "Transfer request amount (ICX)";
"Main.QRCode.Request" = "Request transfer";
"Main.QRCode.Create" = "Create QR code";
"Main.QRCode.Description" = "・ After submittng request amount, QR code will changed to cointained one.";
"Main.QRCode.Generate" = "Create QR code";

// MARK: ManageWalletViewController
"Manage.Title" = "Manage Wallet";
"Manage.Token" = "Manage Token";
"Manage.Backup" = "Backup Wallet";
"Manage.Change" = "Change wallet password";
"Manage.Delete" = "Remove Wallet";
"Manage.Alert.Wallet.Empty" = "Do you like to delete your wallet?";
"Manage.Alert.Wallet" = "There are some balances left in your wallet. Do you still want to delete your wallet?";

// MARK: ManageTokenViewController
"ManageToken.Title" = "Manage Token";
"ManageToken.Add" = "Add Token";
"ManageToken.Empty" = "There is no registered token.";


// MARK: TokenDetailViewController
"TokenDetail.Placeholder.Address" = "Address";
"TokenDetail.Placeholder.Name" = "Token Name";
"TokenDetail.Placeholder.Symbol" = "Token Symbol";
"TokenDetail.Placeholder.Decimal" = "Number of Decimals";
"TokenDetail.Alert.Delete" = "Woud you like to delete %@?";
"TokenDetail.Alert.Cancel" = "Are you canceling to change token information?";

"Token.Delete" = "Delete Token";
"Token.Add" = "Add";

// MARK: AddTokenViewController
"Token.Add.Footer.Description" = "If your token is not in the list, please submit token information.";
"Token.Add.Footer.Button" = "Submit token information";

// MARK: AddTokenInfoViewController
"Token.Info.Error.Address" = "Address is incorrect. please check again.";
"Token.Info.Error.Symbol" = "Please enter with english or number.";
"Token.Info.Error.ConnectionRefused" = "There is no token information.";
"Token.Info.Alert.Cancel" = "Are you canceling adding new token?";

// MARK: ManageBackUpViewController
"Manage.Backup.NavBar.Title" = "Keystore Backup";
"Manage.Backup.Title" = "You can load your wallet using the Keystore file or your private key. Please backup your Keystore file or your private key.";
"Manage.Backup.Download" = "Download the Keystore file";
"Manage.Backup.Keystore.Desc1" = "The Keystore file contains the encrypted private key and requires the wallet password to access it.";
"Manage.Backup.Keystore.Desc2" = "・ Use this Keystore file to load your wallet from other devices.";
"Manage.Backup.PrivateKey.Desc1" = "The private key is unique to your wallet and has no password";
"Manage.Backup.PrivateKey.Desc2" = "・ Pay special attention to your private key as anyone who can access to the private key can transfer assets from the wallets without your permission.";

// MARK: ChangePasswordViewController
"ChangePassword.NavBar.Title" = "Change Wallet Password";
"ChangePassword.Title" = "Enter Current & New Password";
"ChangePassword.Password.Current" = "Enter the current password";
"ChangePassword.Password.New" = "Enter new password";
"ChangePassword.Password.Confirm" = "Confirm password";
"ChangePassword.Desc1" = "You are responsible for keeping your password safe. DO NOT FORGET TO SAVE THIS. If you lose your password, you cannot restore it.";
"ChangePassword.Desc2" = "・ You will need the password to load your wallet in other devices using the Keystore file or your private key";
"ChangePassword.Password.Error.SamePassword" = "This password is same as current password. Please enter new password";

// MARK: DetailViewController
"Wallet.Detail.Section.Title" = "Transacion History";
"Wallet.Detail.Alert.Info" = "If the transactions which is not processed after you withdraw ICX, all pending transactions will be automatically canceled and both withdrawals and fees will be recovered.";

"Wallet.Detail.DepositCompleted" = "Deposit Completed";
"Wallet.Detail.TransferCompleted" = "Transfer Completed";
"Wallet.Detail.DepositFailed" = "Deposit Failed";
"Wallet.Detail.TransferFailed" = "Transfer Failed";
"Wallet.Detail.TransferPending" = "Transfer Pending";
"Wallet.Detail.ETHTransactions" = "ETH Transaction History";
"Wallet.Detail.NoTxHistory" = "No transaction history";
"Wallet.Detail.EtherscanDeposit" = "Deposit history";

// MARK: SelectCoinTokenViewController
"Wallet.Detail.SelectCoinToken.Title" = "Coins&Tokens";

// MARK: DetailOptionViewController
"Wallet.Detail.Option.Title" = "View Option";
"Wallet.Detail.Option.SubTitle" = "Transaction Status";
"Wallet.Detail.Option.All" = "All";
"Wallet.Detail.Option.Send" = "Transfer";
"Wallet.Detail.Option.Deposit" = "Deposit";

// MARK: SendICXViewController
"Send.Balance.Avaliable" = "Available balance (ICX)";
"Send.Balance.Avaliable.ETH" = "Available balance (ETH)";
"Send.Balance.Avaliable.Token" = "Available balance (%@)";
"Send.InputBox.Amount" = "Transfer Amount";
"Send.InputBox.Amount.Error" = "Please enter less than your balance";
"Send.InputBox.Address" = "Receiving address";
"Send.InputBox.Address.Error" = "Invaild ICX address";
"Send.InputBox.Address.Error.ETH" = "Invaild ETH address";
"Send.InputBox.Address.Error.SameAddress" = "Do not transfer your token to your address";
"Send.InputBox.Data" = "Data (Optional Input)";
"Send.InputBox.Data.View" = "Data";
"Send.Amount.Max" = "Max amount";
"Send.Step" = "Proper Step Limit / Price (ICX)";
"Send.GasLimit" = "Gas Limit";
"Send.GasLimit.Error" = "Please enter the Gas Limit at least 21,000";
"Send.GasPrice" = "Gas Price";
"Send.GasPrice.Slow" = "1 (Slow)";
"Send.GasPrice.Fast" = "(Fast) 99";
"Send.EstimatedMaxStep" = "Estimated Maximum Fee (ICX)";
"Send.SendButton" = "Transfer";
"Send.AddressBook" = "Select Address";
"Send.ScanQRCode" = "Scan QR Code";
"Send.Success" = "Transfer Request Complete";
"Send.Error.InsufficientFee.ICX" = "Insufficient ICX balance for transaction fee.";
"Send.Error.InsufficientFee.ETH" = "Insufficient ETH balance for transaction fee.";
"Send.Info.Title" = "Information";
"Send.Info.ICX" = "[Data]\nYou may enter data to send with the transaction.Transaction fee is imposed according to the size of data.\n\n[Step Limit]\nStep limit is the amount of Step to send with your transaction.\nUnnecessary Step is refunded to you at the end of transaction. In other words, you can set the maximum amount of Step but the actual Step consumption is not fixed.\n\n[Step Price]\nStep price is the amount you pay per unit of Step.\n Step price is paid in loop and 1 loop is fixed at 0.000000000000000001(10^-18) ICX. ICON transaction fee is imposed according to various factors such as the number of smart contract usage, the amount of blockchain database used and the size of transaction data, etc.\n\n[Estimated Maxumim Fee]\nEstimated Maximum Fee is Step price * Step limit";
"Send.Info.ETH" = "[Data]\nIf you do not enter the data when required, the transaction will fail.\nYou will still have to pay the transaction fees. You don't have to enter data if it is not required in the transaction.\n\n[Gas Limit]\nGas limit is the amount of gas to send with your transaction.\nUnnecessary gas is refunded to you at the end of transaction. In other words, you can set the maximum amount of gas but the actual gas consumption is not fixed.\n\n[Gas Price]\nGas price is an unit of gas. 1 Gwei equals 0.000000001 ETH.\nEthereum miners prioritize based on gas price when generating blocks. If you set higher gas price, you have more chance to get your transaction confirmed. It also determines your transaction speed.\n\n[Estimated Maximum Fee]\nEstimated Maximum Fee = Gas Price * Gas Limit\nSet proper gas limit and gas price. You will pay transaction fees even if your transaction is not confirmed by miners.";


// MARK: DataTypeViewController
"Send.DataType.Title" = "Data";
"Send.DataType.Subtitle" = "Input Type";

// MARK: InputDataViewController
"Send.InputData.Alert.Cancel" = "Do you want to cancel the data entry?";
"Send.InputData.Alert.Delete" = "Do you want to remove the data entry?";

// MARK: AddressBookViewController
"AddressBook.Title" = "Select Address";
"AddressBook.Button.AddressBook" = "Address Book";
"AddressBook.Button.MyWallet" = "My Wallet";
"AddressBook.NoAddedAddress" = "No registered address";
"AddressBook.AddAddress" = "Add new address";
"AddressBook.Delete" = "Do you want to remove this address?";


// MARK: LockSettingViewController
"LockSetting.NavBar.Title" = "Screen Lock Settings";
"LockSetting.Activate.NavBar.Title" = "Activate Screen Lock";
"LockSetting.Change.NavBar.Title" = "Change the passcode";
"LockSetting.Deactivate.NavBar.Title" = "Enter the passcode";

"LockSetting.Header.Title" = "Do you want to activate the screen lock function?";
"LockSetting.Footer.Title" = "By activating the screen lock function, a 6-digit passcode is required every time you open an ICONex app.\nIf you forget your screen lock passcode, you can reset the passcode using your wallet password.";
"LockSetting.Activate" = "Activate screen lock passcode";
"LockSetting.Change" = "Change screen lock passcode";
"LockSetting.TouchID" = "Unlock with Touch ID";
"LockSetting.FaceID" = "Unlock with Face ID";
"LockSetting.Alert.TouchID" = "You can have fast access to ICONex using your Touch ID.\n\nYou can unlock ICONex with every fingerprint registered on your mobile phone. Please make sure you have registered your own fingerprint.";
"LockSetting.Alert.FaceID" = "You can have fast access to ICONex using your Face ID.\n\nYou can unlock ICONex with every Face ID registered on your mobile phone. Please make sure you have registered your own Face ID.";
"LockSetting.Alert.Password" = "Please set \"enter the password\" on your phone's settings and try again.";

"LockSetting.TouchID.NavBar.Title" = "Touch ID unlock guide";
"LockSetting.FaceID.NavBar.Title" = "Face ID unlock guide";

"LockSetting.TouchID.Title" = "Do you want to unlock ICONex with your Touch ID?";
"LockSetting.FaceID.Title" = "Do you want to unlock ICONex with your Face ID?";

"LockSetting.TouchID.SubTitle" = "You can have fast access to ICONex using your Touch ID.";
"LockSetting.FaceID.SubTitle" = "You can have fast access to ICONex using your Face ID.";
"LockSetting.TouchID.Description" = "You can unlock ICONex with every fingerprint registered on your mobile phone. \nPlease make sure you have registered your own fingerprint.";
"LockSetting.TouchID.Locked" = "Touch ID is currently locked. You can reactivate the Touch ID by entering your mobile passcode to unlock the screen.";
"LockSetting.FaceID.Locked" = "Face ID is currently locked. You can reactivate the Face ID by entering your mobile passcode to unlock the screen.";

"LockSetting.TouchID.Button" = "Unlock with Touch ID";
"LockSetting.FaceID.Button" = "Unlock with Face ID";

"Passcode.Fingerprint.Instruction" = "Place your finger on the sensor to unlock the screen.";
"Passcode.Unlock.Code" = "Unlock the screen lock with the passcode.";

"Passcode.Code.Enter" = "Enter Passcode";
"Passcode.Code.Retry" = "Please Try Again";
"Passcode.Code.Forgot" = "Forgot your passcode?";

"BioAuth.Changed.touchID" = "Your registered Touch ID infomation has been changed. Please try again after registering the Touch ID on mobile settings again.";
"BioAuth.Changed.faceID" = "";
"BioAuth.Reset.touchID" = "Unlock with Touch ID has been disabled. Do you want to enable it?";
"BioAuth.Reset.FaceID" = "Unlock with Face ID has been disabled. Do you want to enable it?";
"BioAuth.UnAvailable.TouchID" = "You can use \"Unlock with Touch ID\" after setting the screen lock from the Settings menu.";
"BioAuth.UnAvailable.FaceID" = "You can use \"Unlock with Face ID\" after setting the screen lock from the Settings menu.";

"BioAuth.NotUsed.TouchID" = "Touch ID is not registered on your phone. You can use \"Unlock with Touch ID\" after registering your Touch ID from the Settings menu.";
"BioAuth.NotUsed.FaceID" = "Face ID is not registered on your phone. You can use \"Unlock with Face ID\" after registering your Face ID from the Settings menu.";

// MARK: ResetPasswordViewController
"Passcode.Reset" = "Reset Screen Lock Passcode";
"Passcode.Reset.withWallet" = "You can reset your passcode using your wallet password.";
"Password.Enter" = "Enter your password";
"Passcode.Count" = "A total of %@ wallets";

// MARK: Connect
"Connect.Select.Title" = "Select Wallet";
"Connect.Send.Developer.Title" = "Select Network";
"Connect.Send.Amount" = "Transfer Amount";
"Connect.Send.to" = "Receiving Address";
"Connect.Send.StepLimit" = "Step Limit";
"Connect.Send.StepPrice" = "Step Price";
"Connect.Send.EstimatedFee" = "Estimated Maximum Fee";
"Connect.Send.EstimatedRemain" = "Estimated Balance";
"Connect.Send.Transfer" = "Transfer";

// MARK: Retry
"Retry.NoNetwork" = "No internet connection";
"Retry.CheckConnectivity" = "Check your mobile data or Wi-Fi and try again";
"Retry.Retry" = "Retry";

// MARK: Alert
"Alert.Bundle.Import.Success" = "Wallet bundle has been loaded. The password of each wallet is the same as the wallet bundle password, and can be altered from the wallet menu.";
"Alert.Password.Changed" = "Wallet password has been changed.";
"Alert.Wallet.RequestPassword" = "Enter Wallet Password";
"Alert.Permission.Camera" = "If camera is not authorized, QR code scan function cannot be activated.\n(Camera can be authorized via App settings.)";
"Alert.Connect.Select.Cancel" = "Cancel select wallet?";
"Alert.Connect.Select.Cance2" = "You will return to previous app.";
"Alert.Connect.Password.Cancel1" = "Cancel enter password?";
"Alert.Connect.Select.Cancel2" = "You will return to previous app.";
"Alert.Connect.Send.Cancel1" = "Cancel the transfer?";
"Alert.Connect.Send.Cancel2" = "You will return to previous app.";
"Alert.Connect.Send.Completed" = "Transfer Request Complete.\nYou can check the transaction history on ICON Tracker";
"Alert.Connect.Send.Completed1" = "Transfer Request Complete.";
"Alert.Connect.Send.Completed2" = "You can check the transaction history on ICON Tracker";

// MARK: LockScreen

"LockScreen.Setting.Title" = "Activate Screen Lock";
"LockScreen.Setting.Header" = "Do you want to activate the screen lock function?";
"LockScreen.Setting.Desc1" = "By activating the screen lock function, a 6-digit passcode is required every time you open an ICONex app.\nIf you forget your screen lock passcode, you can reset the passcode using your wallet password.";
"LockScreen.Setting.useFunction" = "Activate screen lock passcode";
"LockScreen.Setting.ChangeCode" = "Change screen lock passcode";
"LockScreen.Setting.ChangeCode.Title" = "Change Screen Lock Passcode";
"LockScreen.Setting.useBiometrics.TouchID" = "Unlock with Touch ID";
"LockScreen.Setting.useBiometrics.FaceID" = "Unlock with Face ID";

"LockScreen.Setting.Bio.Title.TouchID" = "Touch ID unlock guide";
"LockScreen.Setting.Bio.Title.FaceID" = "Face ID unlock guide";
"LockScreen.Setting.Bio.Header.TouchID" = "Do you want to unlock ICONex with your Touch ID?";
"LockScreen.Setting.Bio.Header.FaceID" = "Do you want to unlock ICONex with your Face ID?";
"LockScreen.Setting.Bio.Desc.TouchID" = "You can have fast access to ICONex using your Touch ID.\n\nYou can unlock ICONex with every fingerprint registered on your mobile phone. Please make sure you have registered your own fingerprint.";
"LockScreen.Setting.Bio.Desc.FaceID" = "You can have fast access to ICONex using your Face ID.\n\nYou can unlock ICONex with every Face ID registered on your mobile phone. Please make sure you have registered your own Face ID.";
"LockScreen.Setting.Bio.Use.TouchID" = "Use Touch ID";
"LockScreen.Setting.Bio.Use.FaceID" = "Use Face ID";

"LockScreen.Setting.Passcode.Header" = "Enter 6-digit screen lock passcode";
"LockScreen.Setting.Passcode.Header_2" = "Confirm screen lock passcode";
"LockScreen.Setting.Passcode.Header_Error" = "Please confirm your passcode";

"LockScreen.Setting.Passcode.Change.Current" = "Enter current 6-digit passcode";
"LockScreen.Setting.Passcode.Change.New" = "Enter new 6-digit passcode";
"LockScreen.Setting.Passcode.Change.Renew" = "Confirm screen lock passcode";
"LockScreen.Setting.Passcode.Change.Error" = "Passcodes do not match.\nPlease check again.";

"LockScreen.Setting.Passcode.Same" = "This passcode is same as current passcode. \nPlease enter the new passcode";
"LockScreen.Alert.AskUseBio" = "You can use the \"Unlock with %@\" after setting a screen lock in your phone's settings";
"LockScreen.Alert.RemovedBio" = "You can use the \"Unlock with %@\" after setting a %@ in your phone's settings";

// Error
"Error.Swap.NoICX" = "You have 0 ICX tokens available for token swap.\nPlease check your balance.";
"Error.Swap.NoETH" = "Please check your ETH balance. ETH is needed for token swap transaction fee.";
"Error.CommonError" = "Error occurred.\nPlease try again.";
"Error.WalletName" = "Enter wallet name";
"Error.Password" = "Enter password";
"Error.Password.Length" = "Password must contain at least 8 characters.";
"Error.Password.CharacterSet" = "Password must contain a combination of letters, numbers, and special characters. ( ? ! : . , % + - / * < > { } ( ) [ ] ` ” ‘ ~ _ ^ \\ | @ # $ & )";
"Error.Password.Invaild.SpecialCharacter" = "Please check the available special character. ( ? ! : . , % + - / * < > { } ( ) [ ] ` \" ' ~ _ ^ \\ | @ # $ & )";
"Error.Password.Serialize" = "Password must not have more than 2 consecutive identical characters.";
"Error.Password.Blank" = "Please do not leave blank.";
"Error.Password.Wrong" = "Please check your password.";
"Error.Password.Mismatch" = "Passwords do not match. Please check again.";

"Error.Wallet.Duplicated.Name" = "This wallet name already exists.";
"Error.Wallet.Duplicated.Address" = "This wallet account already exists.";
"Error.PrivateKey" = "Incorrect private key. Please check again.";
"Error.Address" = "Please confirm receiving address.";
"Error.Letters&NumbersOnly" = "Please enter letters or numbers.";
"Error.Address.ETH.Invalid" = "Incorrect ETH address.";
"Error.Address.ICX.Invalid" = "Incorrect ICX address.";
"Error.Address.ETH.Duplicated" = "This ETH address already exists.";
"Error.Address.ICX.Duplicated" = "This ICX address already exists.";
"Error.Address.Invalid" = "Address format is not correct. Please check the address format";

"Error.Transfer.AboveMax" = "This exceeds your balance.";
"Error.Transfer.BelowZero" = "Please enter amount above zero.";
"Error.Transfer.InsufficientFee" = "Insufficient transaction fee.";
"Error.Transfer.InsufficientFee.ETH" = "Insufficient ETH balance for transaction fee.";
"Error.Transfer.InsufficientFee.ICX" = "Insufficient ICX balance for transaction fee.";
"Error.Transfer.InputGasLimit" = "Please enter gas limit.";
"Error.Transfer.Data" = "Incorrect data";
"Error.QRReader.PrivateKey" = "Incorrect private key. Please check again.";
"Error.NoName" = "No Name";
"Error.InputAddress" = "Please enter receiving address.";
"Error.InputData" = "Please check the data you inputed again";
"Error.EnterSwapAmount" = "Please enter the swap amount.";
"Error.NoBackupFile" = "Please select keystore file.";
"Error.TouchID.Locked" = "Touch ID is currently locked. You can reactivate the Touch ID by entering your mobile passcode to unlock the screen.";
"Error.FaceID.Locked" = "Face ID is currently locked. You can reactivate the Face ID by entering your mobile passcode to unlock the screen.";
"Error.TouchID.NotEnrolled" = "Touch ID is not registered on your phone. Please register your Touch ID from the Settings menu and try again.";
"Error.FaceID.NotEnrolled" = "Face ID is not registered on your phone. Please register your Face ID from the Settings menu and try again.";

"Error.SystemCheck.Failed" = "Integrity Check Failed.\n(Jailbreak / Debugger detected)";
"Error.Transfer.SameAddress" = "Sending and receiving address are the same.";

"Error.Wallet.Create" = "Unable to create an Keystore file.";
"Error.Wallet.CreateFailed" = "Unable to create the wallet";
"Error.Wallet.InvalidFile" = "The file format is invaild. Please check the Keystore file format.";
"Error.Token.Add" = "Unable to add the token.";
"Error.Token.Remove" = "Unable to delete the token.";
"Error.Token.Duplicated" = "You already have this token.";
"Error.Token.ConnectionRefused" = "Unable to import the token information.";
"Error.Token.InputName" = "Enter token name.";
"Error.Token.InputSymbol" = "Enter token symbol.";

"Error.AddressBook.InputName" = "Please enter address book's name.";
"Error.AddressBook.DuplicatedName" = "This address name already exists.";
"Error.AddressBook.DuplicatedAddress" = "This %@ account already exists.";
"Error.Detail.InsufficientBalance" = "You have 0 balance. Please deposit and transfer.";
"Error.Transfer.AmountEmpty" = "Please enter the transfer amount.";
"Error.Transfer.EmptyLimit" = "Please enter step limit.";
"Error.Data.Exceeded" = "This exceeds input limit %dKB";
"Error.Transfer.Limit.LessThan" = "Enter step limit less than %@";
"Error.Transfer.Limit.MoreThan" = "Enter step limit more than %@";
"Error.Connect.Send.InsufficientFee" = "This exceeds your balances";
"Error.Fail.Downloading" = "Failed to download the data";
"Error.Stake.Limit.LessThan" = "Enter less than %@";
"Error.Stake.Limit.MoreThan" = "Enter more than %@";
